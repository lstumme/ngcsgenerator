[comment encoding = UTF-8 /]
[module test-services('http://home.ludo.com/ngcsmodel')]
[import com::home::ludo::ngcsgenerator::utils::ngcsutils/]

[template public generateServicesTest(ngcsmodule : NgcsModule, ngcsdata: NgcsData )]

[file(ngcsmodule.name + '/test/' + ngcsdata.name.toLower() + '-services.js', false,'UTF-8')]
const { expect, should, assert } = require('chai');
const { dbHandler } = require('ngcstesthelpers');
const { ObjectId } = require('mongodb');
[getNgcsImport(ngcsmodule, ngcsdata)/]
const [ngcsdata.name/]Services = require('../services/[ngcsdata.name.toLower()/]services');
const [ngcsdata.name/] = require('../model/[ngcsdata.name.toLower()/]');

describe('[ngcsdata.name/]Services', function () {
[generateCreateTests(ngcsmodule, ngcsdata)/]
[generateUpdateTests(ngcsmodule, ngcsdata)/]
[generateDeleteTests(ngcsmodule, ngcsdata)/]
[generateGettersTests(ngcsmodule, ngcsdata)/]
[generateGetterTests(ngcsmodule, ngcsdata)/]
[generateFindFunctionTests(ngcsmodule, ngcsdata)/]
[generateAddAndRemoveTests(ngcsmodule, ngcsdata)/]
[generateCryptedTests(ngcsmodule, ngcsdata)/]

});
[/file]
[/template]

[template private generateCreateTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData )]
	describe('#create[ngcsdata.name/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
		});

[for (property : NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x|x.required and x.unique))]
		it('should throw an error if [ngcsdata.name/] with given [property.name/] already exists', function (done) {
			const params = {
				[property.name/]: 'default[property.name.toUpperFirst()/]',
[for (param: NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x|x.required and not x.default and x.name.strcmp(property.name) <> 0 and x.unique))]
				[param.name/]: 'other[param.name.toUpperFirst()/]',
[/for]			
[for (param: NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x|x.required and not x.default and not x.unique))]
				[param.name/]: '[param.name/]',
[/for]
[for (param : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x|x.required))]
				[param.name/]: default[param.name.toUpperFirst()/]._id.toString(),
[/for]
			};

            [ngcsdata.name/]Services.create[ngcsdata.name/](params)
                .then(result => {
                    assert.fail('Error');
                })
                .catch(err => {
                    expect(err).to.have.property('message', `E11000 duplicate key error dup key: { : "${params.[property.name/]}" }`);
                    done();
                })
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				})
		});

[/for]
		it('should create a [ngcsdata.name/]', function (done) {
			const params = {
[for (param: NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x|x.required and not x.default and x.unique))]
				[param.name/]: 'other[param.name.toUpperFirst()/]',
[/for]			
[for (param: NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x|x.required and not x.default and not x.unique))]
				[param.name/]: '[param.name/]',
[/for]
[for (param : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x|x.required))]
				[param.name/]: default[param.name.toUpperFirst()/]._id.toString(),
[/for]
			};
            [ngcsdata.name/]Services.create[ngcsdata.name/](params)
                .then(result => {
					expect(result).to.have.ownProperty('[ngcsdata.name.toLowerFirst()/]Id');
[for (property : NgcsAttribute| ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x | x.required and not x.default and not x.crypted))]
					expect(result).to.have.property('[property.name/]', params.[property.name/]);
[/for]
[for (property : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x | x.required))]
					expect(result).to.have.property('[property.name/]', params.[property.name/]);
[/for]
					done();
                })
                .catch(err => {
                    console.log(err);
                    assert.fail('UserService Error');
					done();
                })
		});
	});

[/template]

[template private generateUpdateTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData )]
[if (ngcsdata.ngcsproperty->filter(NgcsSingleProperty)->select(x|x.editable and not x.crypted)->size() > 0)]
	describe('#update[ngcsdata.name/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
[for (property : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x|x.editable))]
		let other[property.refTo.name/];
[/for]
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
[for (property : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x|x.editable))]
			[createInstance(ngcsmodule, property.refTo, true, 'other')/]
[/for]

		});

		it('should throw an error if [ngcsdata.name/] to update is not found', function (done) {
			const params = {
[for (property : NgcsSingleProperty | ngcsdata.ngcsproperty->filter(NgcsSingleProperty)->select(x | x.editable and not x.crypted))]
				[property.name/]: 'new[property.name.toUpperFirst()/]',
[/for]
			};
			[ngcsdata.name/]Services.update[ngcsdata.name/](params)
				.then(result => {
					assert.fail('update[ngcsdata.name/] error');
					done();
				})
				.catch(err => {
					expect(err).to.have.property('message', 'Could not find [ngcsdata.name.toLowerFirst()/].');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

[for (property : NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x | x.editable and not x.crypted))]
		it('should update [ngcsdata.name/] [property.name/] if [property.name/] is provided', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[property.name/]: 'new[property.name.toUpperFirst()/]',
			};

			[ngcsdata.name/]Services.update[ngcsdata.name/](params)
				.then(result => {
					expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]Id', params.[ngcsdata.name.toLowerFirst()/]Id);
					expect(result).to.have.property('[property.name/]', params.[property.name/]);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});	

[/for]
[for (property : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x | x.editable and not x.crypted))]
		it('should update [ngcsdata.name/] [property.name/] if [property.name/] is provided', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[property.name/]: other[property.refTo.name/]._id.toString(),
			};

			[ngcsdata.name/]Services.update[ngcsdata.name/](params)
				.then(result => {
					expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]Id', params.[ngcsdata.name.toLowerFirst()/]Id);
					expect(result).to.have.property('[property.name/]', params.[property.name/]);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});	

[/for]
[if (ngcsdata.ngcsproperty->filter(NgcsSingleProperty)->select(x|x.editable and not x.crypted)->size() > 1)]
		it('should update [ngcsdata.name/] properties if everything is provided', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
[for (property : NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x | x.editable and not x.crypted))]
				[property.name/]: 'new[property.name.toUpperFirst()/]',
[/for]
[for (property : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x | x.editable and not x.crypted))]
				[property.name/]: other[property.refTo.name/]._id.toString(),
[/for]
			};

			[ngcsdata.name/]Services.update[ngcsdata.name/](params)
				.then(result => {
					expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]Id', params.[ngcsdata.name.toLowerFirst()/]Id);
[for (property : NgcsSingleProperty | ngcsdata.ngcsproperty->filter(NgcsSingleProperty)->select(x | x.editable and not x.crypted))]
					expect(result).to.have.property('[property.name/]', params.[property.name/]);
[/for]
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});
[/if]
	});
[/if]
[/template]

[template private generateDeleteTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData )]
	describe('#delete[ngcsdata.name/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
		});

		it('should throw an error if [ngcsdata.name/] to delete is not found', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: ObjectId().toString(),
			};
			[ngcsdata.name/]Services.delete[ngcsdata.name/](params)
				.then(result => {
					assert.fail('delete[ngcsdata.name/] error');
					done();
				})
				.catch(err => {
					expect(err).to.have.property('message', '[ngcsdata.name/] to delete was not found');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should delete [ngcsdata.name/] if [ngcsdata.name/] exists', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
			};
			[ngcsdata.name/]Services.delete[ngcsdata.name/](params)
				.then(result => {
					expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]Id', params.[ngcsdata.name.toLowerFirst()/]Id);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});		
	});

[/template]

[template private generateGettersTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData )]
	describe('#get[ngcsdata.name/]s function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, false, 'default')/]
			for (let i = 0; i < 20; i++) {
				const [ngcsdata.name.toLowerFirst()/] = new [ngcsdata.name/]({
				[for (property : NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x | x.required and not x.default))]
					[property.name/]: '[property.name.toUpperFirst()/]_' + i,
				[/for]
				[for (property : NgcsReference | ngcsdata.ngcsproperty->filter(NgcsReference)->select(x | x.required and not x.default))]
					[property.name/]: default[property.refTo.name.toUpperFirst()/]._id.toString(),
				[/for]
				});
				await [ngcsdata.name.toLowerFirst()/].save();
			}			
		});

		it('should throw an error if range out of bounds', function (done) {
            [ngcsdata.name/]Services.get[ngcsdata.name/]s({ [for (key : NgcsReference| ngcsdata.ngcsproperty->filter(NgcsReference)->select(x|x.isKey))
	separator(', ') after(', ')][key.name/]Id: default[key.name.toUpperFirst()/]._id.toString()[/for]page: '3', perPage: '10' })
                .then(result => {
                    assert.fail('Error');
                })
                .catch(err => {
                    expect(err).to.have.property('message', 'Pagination out of bounds.');
                    expect(err).to.have.property('statusCode', 400);
                    done();
                })
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should return an object containing the required data and the number if pages', function (done) {
            const perPage = '10';
            [ngcsdata.name/]Services.get[ngcsdata.name/]s({ [for (key : NgcsReference| ngcsdata.ngcsproperty->filter(NgcsReference)->select(x|x.isKey))
	separator(', ') after(', ')][key.name/]Id: default[key.name.toUpperFirst()/]._id.toString()[/for]page: 1, perPage: perPage })
                .then(result => {
                    expect(result).to.have.property('pageCount', 2);
                    expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]s').to.have.lengthOf(perPage);
                    done();
                })
                .catch(err => {
                    console.log(err);
                    assert.fail(err);
                    done();
                })			
		});

        it('should return an object containing the required data and the number of pages 2', function (done) {
            const perPage = '7';
            [ngcsdata.name/]Services.get[ngcsdata.name/]s({ [for (key : NgcsReference| ngcsdata.ngcsproperty->filter(NgcsReference)->select(x|x.isKey))
	separator(', ') after(', ')][key.name/]Id: default[key.name.toUpperFirst()/]._id.toString()[/for]page: '1', perPage: perPage })
                .then(result => {
                    expect(result).to.have.property('pageCount', 3);
                    expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]s').to.have.lengthOf(perPage);
                    done();
                })
                .catch(err => {
                    console.log(err);
                    assert.fail(err);
                    done();
                })
        });
	});

[/template]

[template private generateGetterTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData )]
	describe('#get[ngcsdata.name/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
		});
	
		it('should throw an error if [ngcsdata.name/] not found', function (done) {
			[ngcsdata.name/]Services.get[ngcsdata.name/]({ [ngcsdata.name.toLowerFirst()/]Id: ObjectId().toString() })
				.then(result => {
					assert.fail('Error');
				})
				.catch(err => {
					expect(err).to.have.property('statusCode', 404);
					expect(err).to.have.property('message', '[ngcsdata.name/] not found');
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				})
		});

		it('should return an object if [ngcsdata.name/] found', function (done) {
			[ngcsdata.name/]Services.get[ngcsdata.name/]({ [ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString() })
				.then(result => {
					expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]Id', default[ngcsdata.name/]._id.toString());
					[for (property : NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x | x.required and not x.default and not x.crypted))]
					expect(result).to.have.property('[property.name/]', default[ngcsdata.name/].[property.name/]);
					[/for]				
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				})
		});
	});

[/template]

[template private generateFindFunctionTests(ngcsmodule : NgcsModule, ngcsdata : NgcsData)]
[for (property : NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x|x.unique))]
	describe('#find[ngcsdata.name/]By[property.name.toUpperFirst()/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
		});

		it('should throw an error if [ngcsdata.name/] is not found', function (done) {
			const params = {
				[property.name/]: 'other[ngcsdata.name/][property.name.toUpperFirst()/]',
			};
			[ngcsdata.name/]Services.find[ngcsdata.name/]By[property.name.toUpperFirst()/](params)
				.then([ngcsdata.name.toLowerFirst()/] => {
					assert.fail('Error');
				})
				.catch(err => {
					expect(err).to.have.property('message', 'Could not find [ngcsdata.name/]');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should return an object if [ngcsdata.name/] is found', function (done) {
			const params = {
				[property.name/]: default[ngcsdata.name/].[property.name/],
			};
			[ngcsdata.name/]Services.find[ngcsdata.name/]By[property.name.toUpperFirst()/](params)
				.then([ngcsdata.name.toLowerFirst()/] => {
					expect([ngcsdata.name.toLowerFirst()/]).not.to.be.null;
					expect([ngcsdata.name.toLowerFirst()/]).to.have.property('[ngcsdata.name.toLowerFirst()/]Id', default[ngcsdata.name/]._id.toString());
					[for (p : NgcsAttribute | ngcsdata.ngcsproperty->filter(NgcsAttribute)->select(x | x.required and not x.default and not x.crypted))]
					expect([ngcsdata.name.toLowerFirst()/]).to.have.property('[p.name/]', default[ngcsdata.name/].[p.name/]);
					[/for]
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});
	});

[/for]	
[/template]


[template private generateAddAndRemoveTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData)]
[for (aggregation : NgcsAggregation | ngcsdata.ngcsproperty->filter(NgcsAggregation))]
[generateAddTests(ngcsmodule, ngcsdata, aggregation)/]
[generateRemoveTests(ngcsmodule, ngcsdata, aggregation)/]
[/for]
[/template]

[template private generateAddTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData, aggregation: NgcsAggregation) { field: String = ngcsdata.createElementName(aggregation).toLowerFirst(); }]
	describe('#add[field.toUpperFirst()/]To[ngcsdata.name/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		let inner[aggregation.refTo.name/];
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
			[createInstance(ngcsmodule, aggregation.refTo, true, 'inner')/]
		});

		it('should throw an error if [ngcsdata.name/] is not found', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: new ObjectId().toString(),
				[field.toLowerFirst()/]Id: inner[aggregation.refTo.name/]._id.toString(), 
			};

			[ngcsdata.name/]Services.add[field.toUpperFirst()/]To[ngcsdata.name/](params)
				.then(() => {
					assert.fail(err);
				})
				.catch(err => {
					expect(err).to.have.property('message', '[ngcsdata.name/] not found');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should throw an error if [field/] is not found', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[field.toLowerFirst()/]Id: new ObjectId().toString(), 
			};

			[ngcsdata.name/]Services.add[field.toUpperFirst()/]To[ngcsdata.name/](params)
				.then(() => {
					assert.fail(err);
				})
				.catch(err => {
					expect(err).to.have.property('message', '[aggregation.refTo.name/] to add not found');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should throw an error if [field/] is already in [aggregation.name/]', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[field/]Id: inner[aggregation.refTo.name/]._id.toString(), 
			};

			default[ngcsdata.name/].[aggregation.name/].push(inner[aggregation.refTo.name/]._id.toString());
			default[ngcsdata.name/].save()
				.then(() => {
					[ngcsdata.name/]Services.add[field.toUpperFirst()/]To[ngcsdata.name/](params)
						.then(() => {
							assert.fail(err);
						})
						.catch(err => {
							expect(err).to.have.property('message', '[aggregation.refTo.name/] already in [aggregation.name/]');
							expect(err).to.have.property('statusCode', 400);
							done();
						})
						.catch(err => {
							console.log(err);
							assert.fail(err);
							done();
						});
				})
		});
		
		it('should add [aggregation.refTo.name/] to [ngcsdata.name/] [aggregation.name/]', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[field/]Id: inner[aggregation.refTo.name/]._id.toString(), 
			};

			[ngcsdata.name/]Services.add[field.toUpperFirst()/]To[ngcsdata.name/](params)
				.then(() => {
					[ngcsdata.name/].findOne({_id: default[ngcsdata.name/]._id.toString() })
						.then(new[ngcsdata.name/] => {
							expect(new[ngcsdata.name/]).not.to.be.null;
							expect(new[ngcsdata.name/].[aggregation.name/].length).to.be.equal(1);
							expect(new[ngcsdata.name/].[aggregation.name/].includes(inner[aggregation.refTo.name/]._id.toString())).to.be.true;							
							done();
						})
					.catch(err => {
						console.log(err);
						assert.fail(err);
						done();
					})
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});
	});

[/template]

[template private generateRemoveTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData, aggregation: NgcsAggregation) { field: String = ngcsdata.createElementName(aggregation).toLowerFirst(); }]
	describe('#remove[field.toUpperFirst()/]From[ngcsdata.name/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		let inner[aggregation.refTo.name/];
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
			[createInstance(ngcsmodule, aggregation.refTo, true, 'inner')/]
			
			default[ngcsdata.name/].[aggregation.name/].push(inner[aggregation.refTo.name/]._id);
			default[ngcsdata.name/] = await default[ngcsdata.name/].save();
		});

		it('should throw an error if [ngcsdata.name/] is not found', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: new ObjectId().toString(),
				[field.toLowerFirst()/]Id: inner[aggregation.refTo.name/]._id.toString(), 
			};

			[ngcsdata.name/]Services.remove[field.toUpperFirst()/]From[ngcsdata.name/](params)
				.then(() => {
					assert.fail(err);
				})
				.catch(err => {
					expect(err).to.have.property('message', '[ngcsdata.name/] not found');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should throw an error if [field/] is not found', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[field.toLowerFirst()/]Id: new ObjectId().toString(), 
			};

			[ngcsdata.name/]Services.remove[field.toUpperFirst()/]From[ngcsdata.name/](params)
				.then(() => {
					assert.fail(err);
				})
				.catch(err => {
					expect(err).to.have.property('message', '[aggregation.refTo.name/] to remove not found');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should throw an error if [field/] is not in [aggregation.name/]', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[field/]Id: inner[aggregation.refTo.name/]._id.toString(), 
			};

			default[ngcsdata.name/].[aggregation.name/] = ['[]'/];
			default[ngcsdata.name/].save()
				.then(() => {
					[ngcsdata.name/]Services.remove[field.toUpperFirst()/]From[ngcsdata.name/](params)
						.then(() => {
							assert.fail(err);
						})
						.catch(err => {
							expect(err).to.have.property('message', '[aggregation.refTo.name/] not in [aggregation.name/]');
							expect(err).to.have.property('statusCode', 400);
							done();
						})
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});
		
		it('should remove [aggregation.refTo.name/] from [ngcsdata.name/] [aggregation.name/]', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				[field/]Id: inner[aggregation.refTo.name/]._id.toString(), 
			};

			[ngcsdata.name/]Services.remove[field.toUpperFirst()/]From[ngcsdata.name/](params)
				.then(() => {
					[ngcsdata.name/].findOne({_id: default[ngcsdata.name/]._id.toString() })
						.then(new[ngcsdata.name/] => {
							expect(new[ngcsdata.name/]).not.to.be.null;
							expect(new[ngcsdata.name/].[aggregation.name/].length).to.be.equal(0);
							expect(new[ngcsdata.name/].[aggregation.name/].includes(inner[aggregation.refTo.name/]._id.toString())).to.be.false;							
							done();
						})
						.catch(err => {
							console.log(err);
							assert.fail(err);
							done();
						})
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});
	});
[/template]

[template private generateCryptedTests(ngcsmodule : NgcsModule, ngcsdata: NgcsData )]
[for (property : NgcsSingleProperty | ngcsdata.ngcsproperty->filter(NgcsSingleProperty)->select(x|x.editable and x.crypted))]
	describe('#update[ngcsdata.name/][property.name.toUpperFirst()/] function', function () {
		[initVariables(ngcsmodule, ngcsdata)/]
		[databaseInitialization(ngcsdata)/]
		
		beforeEach(async () => {
			[createInstance(ngcsmodule, ngcsdata, true, 'default')/]
		});

		it('should throw an error if [ngcsdata.name/] to delete is not found', function (done) {
			const params = {
				new[property.name.toUpperFirst()/]: 'new[property.name.toUpperFirst()/]',
			};
			[ngcsdata.name/]Services.update[ngcsdata.name/][property.name.toUpperFirst()/](params)
				.then(result => {
					assert.fail('update[ngcsdata.name/][property.name.toUpperFirst()/] error');
					done();
				})
				.catch(err => {
					expect(err).to.have.property('message', 'Could not find [ngcsdata.name.toLowerFirst()/].');
					expect(err).to.have.property('statusCode', 404);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});

		it('should update [property.name/] if [ngcsdata.name/] exists', function (done) {
			const params = {
				[ngcsdata.name.toLowerFirst()/]Id: default[ngcsdata.name/]._id.toString(),
				new[property.name.toUpperFirst()/]: 'new[property.name.toUpperFirst()/]',
			};

			[ngcsdata.name/]Services.update[ngcsdata.name/][property.name.toUpperFirst()/](params)
				.then(result => {
					expect(result).to.have.property('[ngcsdata.name.toLowerFirst()/]Id', params.[ngcsdata.name.toLowerFirst()/]Id);
					done();
				})
				.catch(err => {
					console.log(err);
					assert.fail(err);
					done();
				});
		});		
	});
[/for]
[/template]




[template private databaseInitialization(ngcsdata: NgcsData)]
before(async () => {
	await dbHandler.connect();
	await [ngcsdata.name/].createIndexes();
});

after(async () => {
	await dbHandler.closeDatabase();
});

afterEach(async () => {
	await dbHandler.clearDatabase();
});
[/template]


